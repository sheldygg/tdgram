from __future__ import annotations

from dataclasses import dataclass
from typing import Literal

from .base import BaseType


@dataclass(kw_only=True)
class RemoteFile(BaseType):
    """
    Represents a remote file
    """

    __type__: Literal["remoteFile"] = "remoteFile"

    id: str | None = None
    """Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers."""
    unique_id: str | None = None
    """Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time"""
    is_uploading_active: bool
    """True, if the file is currently being uploaded (or a remote copy is being generated by some other means)"""
    is_uploading_completed: bool
    """True, if a remote copy is fully available"""
    uploaded_size: int
    """Size of the remote available part of the file, in bytes; 0 if unknown"""
