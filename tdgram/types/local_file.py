from __future__ import annotations

from dataclasses import dataclass
from typing import Literal

from .base import BaseType


@dataclass(kw_only=True)
class LocalFile(BaseType):
    """
    Represents a local file
    """

    __type__: Literal["localFile"] = "localFile"

    path: str | None = None
    """Local path to the locally available file part; may be empty"""
    can_be_downloaded: bool
    """True, if it is possible to download or generate the file"""
    can_be_deleted: bool
    """True, if the file can be deleted"""
    is_downloading_active: bool
    """True, if the file is currently being downloaded (or a local copy is being generated by some other means)"""
    is_downloading_completed: bool
    """True, if the local copy is fully available"""
    download_offset: int
    """Download will be started from this offset. downloaded_prefix_size is calculated from this offset"""
    downloaded_prefix_size: int
    """If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix in bytes"""
    downloaded_size: int
    """Total downloaded file size, in bytes. Can be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage"""
