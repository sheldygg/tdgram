from __future__ import annotations

from dataclasses import dataclass
from typing import TYPE_CHECKING, Literal

from .base import BaseType

if TYPE_CHECKING:
    from . import DiceStickers


@dataclass(kw_only=True)
class MessageDice(BaseType):
    """
    A dice message. The dice value is randomly generated by the server
    """

    __type__: Literal["messageDice"] = "messageDice"

    initial_state: DiceStickers | None = None
    """The animated stickers with the initial dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known"""
    final_state: DiceStickers | None = None
    """The animated stickers with the final dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known"""
    emoji: str
    """Emoji on which the dice throw animation is based"""
    value: int
    """The dice value. If the value is 0, the dice don't have final state yet"""
    success_animation_frame_number: int
    """Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded"""
